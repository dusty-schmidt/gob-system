#!/bin/bash
# GOB Monitoring Dashboard Quick Access Command
# Usage: monitor [start|stop|restart|open|status|logs]

set -e

# Terminal color codes - minimal palette
DIM='\033[2m'
BRIGHT='\033[1m'
NORMAL='\033[0m'
INVERSE='\033[7m'

# Monochrome color scheme
WHITE='\033[37m'
GRAY='\033[90m'
DARK_GRAY='\033[30m'
LIGHT_GRAY='\033[37m'

# Accent colors - used sparingly
GREEN='\033[32m'
RED='\033[31m'
YELLOW='\033[33m'
CYAN='\033[36m'
NC='\033[0m' # No Color

# Configuration
MONITOR_URL="http://localhost:8050"
SERVICE_NAME="gob-monitoring"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Terminal width detection
TERM_WIDTH=$(tput cols 2>/dev/null || echo 80)

# Draw a line across terminal
draw_line() {
    local char="${1:-─}"
    local width="${2:-$TERM_WIDTH}"
    printf '%*s\n' "$width" '' | tr ' ' "$char"
}

# Draw a box border
draw_box_top() {
    echo -e "${DIM}┌$(draw_line '─' $((TERM_WIDTH - 2)))┐${NC}"
}

draw_box_bottom() {
    echo -e "${DIM}└$(draw_line '─' $((TERM_WIDTH - 2)))┘${NC}"
}

draw_box_line() {
    local content="$1"
    local padding=$((TERM_WIDTH - 4 - ${#content}))
    echo -e "${DIM}│${NC} $content$(printf '%*s' $padding '')${DIM}│${NC}"
}

print_status() {
    local status="$1"
    local message="$2"
    case $status in
        "success") 
            echo -e "  ${GREEN}[OK]${NC}     ${message}"
            ;;
        "error") 
            echo -e "  ${RED}[FAIL]${NC}   ${message}"
            ;;
        "warning") 
            echo -e "  ${YELLOW}[WARN]${NC}   ${message}"
            ;;
        "info") 
            echo -e "  ${DIM}[INFO]${NC}   ${message}"
            ;;
        "running")
            echo -e "  ${GREEN}[LIVE]${NC}   ${message}"
            ;;
        "stopped")
            echo -e "  ${GRAY}[DOWN]${NC}   ${message}"
            ;;
        *) 
            echo -e "           ${message}"
            ;;
    esac
}

print_header() {
    clear
    echo
    echo -e "${DIM}$(draw_line '━' $TERM_WIDTH)${NC}"
    echo -e "  ${BRIGHT}GOB MONITORING SYSTEM${NC}  ${DIM}│${NC}  Backend Process Monitor"
    echo -e "${DIM}$(draw_line '━' $TERM_WIDTH)${NC}"
    echo
}

show_help() {
    print_header
    
    echo -e "  ${DIM}USAGE${NC}"
    echo -e "  ${BRIGHT}monitor${NC} [command]"
    echo
    
    echo -e "  ${DIM}COMMANDS${NC}"
    echo -e "  ${BRIGHT}open${NC}       Launch monitoring dashboard in browser"
    echo -e "  ${BRIGHT}start${NC}      Start monitoring service"
    echo -e "  ${BRIGHT}stop${NC}       Stop monitoring service" 
    echo -e "  ${BRIGHT}restart${NC}    Restart monitoring service"
    echo -e "  ${BRIGHT}status${NC}     Show service status"
    echo -e "  ${BRIGHT}logs${NC}       Display service logs"
    echo -e "  ${BRIGHT}install${NC}    Install service for auto-start"
    echo -e "  ${BRIGHT}uninstall${NC}  Remove auto-start service"
    echo -e "  ${BRIGHT}help${NC}       Show this help message"
    echo
    
    echo -e "  ${DIM}QUICK START${NC}"
    echo -e "  ${DIM}│${NC}"
    echo -e "  ${DIM}├─${NC} monitor open      ${DIM}# Launch dashboard${NC}"
    echo -e "  ${DIM}├─${NC} monitor status    ${DIM}# Check service${NC}"
    echo -e "  ${DIM}└─${NC} monitor install   ${DIM}# Enable auto-start${NC}"
    echo
    
    echo -e "${DIM}$(draw_line '─' $TERM_WIDTH)${NC}"
    echo -e "  ${DIM}Dashboard URL:${NC} ${BRIGHT}${MONITOR_URL}${NC}"
    echo
}

open_dashboard() {
    print_header
    print_status "info" "Initializing dashboard connection"
    echo
    
    # Check if service is running first
    echo -e "  ${DIM}Checking service status...${NC}"
    if ! curl -s -f "$MONITOR_URL" > /dev/null 2>&1; then
        echo -e "  ${YELLOW}[!]${NC} Service not responding"
        echo -e "  ${DIM}Starting monitoring service...${NC}"
        start_service_silent
        sleep 3
        echo
    fi
    
    # Open browser
    echo -e "  ${DIM}Launching browser...${NC}"
    if command -v xdg-open >/dev/null 2>&1; then
        xdg-open "$MONITOR_URL" 2>/dev/null
        print_status "success" "Dashboard launched"
        echo
        echo -e "${DIM}$(draw_line '─' $TERM_WIDTH)${NC}"
        echo -e "  ${BRIGHT}URL:${NC} ${MONITOR_URL}"
    elif command -v open >/dev/null 2>&1; then  # macOS
        open "$MONITOR_URL" 2>/dev/null
        print_status "success" "Dashboard launched"
        echo
        echo -e "${DIM}$(draw_line '─' $TERM_WIDTH)${NC}"
        echo -e "  ${BRIGHT}URL:${NC} ${MONITOR_URL}"
    else
        echo
        echo -e "${DIM}$(draw_line '─' $TERM_WIDTH)${NC}"
        echo -e "  ${YELLOW}[!]${NC} Manual browser launch required"
        echo -e "  ${BRIGHT}URL:${NC} ${MONITOR_URL}"
    fi
    echo
}

# Silent version for internal use
start_service_silent() {
    if systemctl --user is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
        return 0
    fi
    
    if systemctl --user start "$SERVICE_NAME" 2>/dev/null; then
        return 0
    elif sudo systemctl start "$SERVICE_NAME" 2>/dev/null; then
        return 0
    else
        cd "$SCRIPT_DIR"
        nohup python server.py --port 8050 >/dev/null 2>&1 &
        sleep 2
    fi
}

start_service() {
    print_header
    echo -e "  ${DIM}STARTING SERVICE${NC}"
    echo
    
    # Check if already running
    echo -e "  ${DIM}Checking current state...${NC}"
    if systemctl --user is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
        print_status "running" "Service already active"
        echo
        echo -e "${DIM}$(draw_line '─' $TERM_WIDTH)${NC}"
        echo -e "  ${DIM}Dashboard:${NC} ${MONITOR_URL}"
        echo
        return 0
    fi
    
    # Try to start as user service first, then system service
    echo -e "  ${DIM}Initializing service...${NC}"
    if systemctl --user start "$SERVICE_NAME" 2>/dev/null; then
        print_status "success" "User service started"
    elif sudo systemctl start "$SERVICE_NAME" 2>/dev/null; then
        print_status "success" "System service started"
    else
        # Fallback: start directly
        echo -e "  ${DIM}Starting process directly...${NC}"
        cd "$SCRIPT_DIR"
        nohup python server.py --port 8050 >/dev/null 2>&1 &
        sleep 3
        if curl -s -f "$MONITOR_URL" > /dev/null 2>&1; then
            print_status "success" "Service started"
        else
            print_status "error" "Failed to start service"
            echo
            return 1
        fi
    fi
    
    echo
    echo -e "${DIM}$(draw_line '─' $TERM_WIDTH)${NC}"
    echo -e "  ${DIM}Dashboard:${NC} ${MONITOR_URL}"
    echo
}

stop_service() {
    print_header
    echo -e "  ${DIM}STOPPING SERVICE${NC}"
    echo
    
    echo -e "  ${DIM}Terminating process...${NC}"
    
    # Try to stop user service, then system service
    if systemctl --user stop "$SERVICE_NAME" 2>/dev/null; then
        print_status "success" "User service stopped"
    elif sudo systemctl stop "$SERVICE_NAME" 2>/dev/null; then
        print_status "success" "System service stopped"
    else
        # Fallback: kill process
        if pkill -f "python server.py.*port 8050"; then
            print_status "success" "Process terminated"
        else
            print_status "stopped" "No active service found"
        fi
    fi
    
    echo
    echo -e "${DIM}$(draw_line '─' $TERM_WIDTH)${NC}"
    echo
}

restart_service() {
    print_header
    echo -e "  ${DIM}RESTARTING SERVICE${NC}"
    echo
    
    echo -e "  ${DIM}Phase 1: Stopping current instance...${NC}"
    # Stop silently
    if systemctl --user stop "$SERVICE_NAME" 2>/dev/null || \
       sudo systemctl stop "$SERVICE_NAME" 2>/dev/null || \
       pkill -f "python server.py.*port 8050" 2>/dev/null; then
        echo -e "  ${GREEN}[✓]${NC} Stopped"
    fi
    
    sleep 2
    
    echo -e "  ${DIM}Phase 2: Starting new instance...${NC}"
    start_service_silent
    if curl -s -f "$MONITOR_URL" > /dev/null 2>&1; then
        echo -e "  ${GREEN}[✓]${NC} Started"
    else
        echo -e "  ${RED}[×]${NC} Failed to start"
    fi
    
    echo
    echo -e "${DIM}$(draw_line '─' $TERM_WIDTH)${NC}"
    echo -e "  ${DIM}Dashboard:${NC} ${MONITOR_URL}"
    echo
}

show_status() {
    print_header
    echo -e "  ${DIM}SERVICE STATUS${NC}"
    echo
    
    # Main status check
    echo -e "  ${DIM}Connection test...${NC}"
    if curl -s -f "$MONITOR_URL" > /dev/null 2>&1; then
        print_status "running" "Dashboard responding"
        echo
        echo -e "  ${DIM}Service Details:${NC}"
        echo -e "  ${DIM}├─${NC} URL: ${BRIGHT}${MONITOR_URL}${NC}"
        
        # Check systemd service
        if systemctl --user is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
            local status=$(systemctl --user is-active $SERVICE_NAME 2>/dev/null)
            echo -e "  ${DIM}├─${NC} Type: User Service"
            echo -e "  ${DIM}├─${NC} State: ${GREEN}${status}${NC}"
        elif systemctl is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
            local status=$(systemctl is-active $SERVICE_NAME 2>/dev/null)
            echo -e "  ${DIM}├─${NC} Type: System Service"
            echo -e "  ${DIM}├─${NC} State: ${GREEN}${status}${NC}"
        fi
        
        # Check for process
        if pgrep -f "python server.py.*port 8050" >/dev/null; then
            local pid=$(pgrep -f 'python server.py.*port 8050')
            echo -e "  ${DIM}└─${NC} PID: ${pid}"
        fi
    else
        print_status "stopped" "Dashboard not responding"
        echo
        echo -e "  ${DIM}Service appears to be offline${NC}"
        
        # Check if service exists but not responding
        if systemctl --user is-active --quiet "$SERVICE_NAME" 2>/dev/null || \
           systemctl is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
            echo -e "  ${YELLOW}[!]${NC} Service registered but not responding"
            echo -e "  ${DIM}Try: monitor restart${NC}"
        fi
    fi
    
    echo
    echo -e "${DIM}$(draw_line '─' $TERM_WIDTH)${NC}"
    echo
}

show_logs() {
    print_header
    print_status "info" "Service logs:"
    echo
    
    if systemctl --user is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
        journalctl --user -u "$SERVICE_NAME" --no-pager -n 20
    elif systemctl is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
        sudo journalctl -u "$SERVICE_NAME" --no-pager -n 20
    else
        print_status "warning" "No systemd service logs found"
        if [ -f "$SCRIPT_DIR/logs/browser_opener.log" ]; then
            echo "Browser opener logs:"
            tail -n 10 "$SCRIPT_DIR/logs/browser_opener.log"
        fi
    fi
}

install_service() {
    print_header
    print_status "info" "Installing monitoring service for auto-start..."
    
    SERVICE_FILE="$SCRIPT_DIR/gob-monitoring.service"
    
    if [ ! -f "$SERVICE_FILE" ]; then
        print_status "error" "Service file not found: $SERVICE_FILE"
        return 1
    fi
    
    # Install as system service
    sudo cp "$SERVICE_FILE" /etc/systemd/system/
    sudo systemctl daemon-reload
    sudo systemctl enable "$SERVICE_NAME"
    
    print_status "success" "Service installed for auto-start on boot"
    print_status "info" "To start now: monitor start"
}

uninstall_service() {
    print_header
    print_status "info" "Uninstalling monitoring service..."
    
    sudo systemctl stop "$SERVICE_NAME" 2>/dev/null || true
    sudo systemctl disable "$SERVICE_NAME" 2>/dev/null || true
    sudo rm -f "/etc/systemd/system/$SERVICE_NAME.service"
    sudo systemctl daemon-reload
    
    print_status "success" "Service uninstalled"
}

# Main command dispatcher
case "${1:-open}" in
    "open")
        open_dashboard
        ;;
    "start")
        start_service
        ;;
    "stop")
        stop_service
        ;;
    "restart")
        restart_service
        ;;
    "status")
        show_status
        ;;
    "logs")
        show_logs
        ;;
    "install")
        install_service
        ;;
    "uninstall")
        uninstall_service
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        print_status "error" "Unknown command: $1"
        echo
        show_help
        exit 1
        ;;
esac
