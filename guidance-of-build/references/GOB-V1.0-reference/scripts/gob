#!/bin/bash
# GOB (General Orchestrator Bot) Management CLI
# Usage: gob [start|stop|restart|status|logs|url|help]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color

# Configuration
GOB_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
GOB_HOST="0.0.0.0"
GOB_PORT="50080"
GOB_URL="http://localhost:${GOB_PORT}"
CONDA_ENV="gob"
LOG_FILE="${GOB_DIR}/gob_output.log"
PID_FILE="${GOB_DIR}/.gob.pid"

# Helper functions
print_header() {
    echo -e "${CYAN}=== GOB Management CLI ===${NC}"
}

print_status() {
    local status="$1"
    local message="$2"
    case $status in
        "success") echo -e "${GREEN}✅ ${message}${NC}" ;;
        "error") echo -e "${RED}❌ ${message}${NC}" ;;
        "warning") echo -e "${YELLOW}⚠️  ${message}${NC}" ;;
        "info") echo -e "${BLUE}ℹ️  ${message}${NC}" ;;
        *) echo -e "${GRAY}${message}${NC}" ;;
    esac
}

# Check if conda environment exists
check_conda_env() {
    # Source bashrc to ensure conda is available
    source ~/.bashrc >/dev/null 2>&1 || true
    
    if ! command -v mamba >/dev/null 2>&1 && ! command -v conda >/dev/null 2>&1; then
        print_status "error" "Neither mamba nor conda found. Please install Miniconda/Anaconda."
        exit 1
    fi
    
    local conda_cmd="mamba"
    if ! command -v mamba >/dev/null 2>&1; then
        conda_cmd="conda"
    fi
    
    # Initialize conda if needed
    if command -v mamba >/dev/null 2>&1; then
        eval "$(mamba shell hook --shell bash)" >/dev/null 2>&1 || true
    else
        eval "$(conda shell hook --shell bash)" >/dev/null 2>&1 || true
    fi
    
    if ! $conda_cmd env list | grep -q "${CONDA_ENV}"; then
        print_status "error" "Conda environment '${CONDA_ENV}' not found. Please create it first."
        exit 1
    fi
}

# Activate conda environment
activate_conda() {
    if [[ "$CONDA_DEFAULT_ENV" != "$CONDA_ENV" ]]; then
        print_status "info" "Activating conda environment: ${CONDA_ENV}"
        source ~/.bashrc
        if command -v mamba >/dev/null 2>&1; then
            eval "$(mamba shell hook --shell bash)"
            mamba activate "$CONDA_ENV"
        else
            eval "$(conda shell hook --shell bash)"
            conda activate "$CONDA_ENV"
        fi
    fi
}

# Get GOB process ID
get_gob_pid() {
    pgrep -f "python run_ui.py.*--port ${GOB_PORT}" 2>/dev/null | head -1
}

# Check if GOB is running
is_running() {
    local pid=$(get_gob_pid)
    if [ -n "$pid" ]; then
        # Double-check the process still exists and is in the right directory
        if kill -0 "$pid" 2>/dev/null; then
            local proc_dir=$(pwdx "$pid" 2>/dev/null | cut -d' ' -f2)
            if [ "$proc_dir" = "$GOB_DIR" ]; then
                echo "$pid"
                return 0
            fi
        fi
    fi
    return 1
}

# Start GOB
start_gob() {
    print_header
    
    if is_running >/dev/null; then
        local pid=$(get_gob_pid)
        print_status "warning" "GOB is already running (PID: $pid)"
        print_status "info" "URL: ${GOB_URL}"
        return 0
    fi
    
    print_status "info" "Starting GOB server..."
    
    # Check dependencies
    check_conda_env
    
    # Change to GOB directory
    cd "$GOB_DIR" || {
        print_status "error" "Could not change to GOB directory: $GOB_DIR"
        exit 1
    }
    
    # Activate environment and start server
    (
        source ~/.bashrc
        if command -v mamba >/dev/null 2>&1; then
            eval "$(mamba shell hook --shell bash)"
            mamba activate "$CONDA_ENV"
        else
            eval "$(conda shell hook --shell bash)"
            conda activate "$CONDA_ENV"
        fi
        
        nohup python run_ui.py --host "$GOB_HOST" --port "$GOB_PORT" > "$LOG_FILE" 2>&1 &
        echo $! > "$PID_FILE"
    )
    
    # Wait a moment and check if it started successfully
    sleep 3
    
    if is_running >/dev/null; then
        local pid=$(get_gob_pid)
        print_status "success" "GOB server started successfully (PID: $pid)"
        print_status "info" "URL: ${GOB_URL}"
        print_status "info" "Logs: ${LOG_FILE}"
        
        # Wait a bit more and test the endpoint
        sleep 5
        if curl -s -I "$GOB_URL" | grep -q "HTTP/1.1 200 OK"; then
            print_status "success" "GOB is responding to HTTP requests"
        else
            print_status "warning" "GOB started but may not be fully ready yet"
        fi
    else
        print_status "error" "Failed to start GOB server"
        if [ -f "$LOG_FILE" ]; then
            echo -e "\n${GRAY}Last 10 lines of log:${NC}"
            tail -10 "$LOG_FILE"
        fi
        exit 1
    fi
}

# Stop GOB
stop_gob() {
    print_header
    
    local pid
    if ! pid=$(is_running); then
        print_status "warning" "GOB is not running"
        # Clean up stale PID file
        [ -f "$PID_FILE" ] && rm -f "$PID_FILE"
        return 0
    fi
    
    print_status "info" "Stopping GOB server (PID: $pid)..."
    
    # Try graceful shutdown first
    if kill -TERM "$pid" 2>/dev/null; then
        local count=0
        while [ $count -lt 10 ]; do
            if ! kill -0 "$pid" 2>/dev/null; then
                print_status "success" "GOB server stopped gracefully"
                [ -f "$PID_FILE" ] && rm -f "$PID_FILE"
                return 0
            fi
            sleep 1
            ((count++))
        done
        
        # Force kill if graceful shutdown failed
        print_status "warning" "Graceful shutdown timed out, force killing..."
        kill -KILL "$pid" 2>/dev/null || true
        sleep 1
    fi
    
    if ! kill -0 "$pid" 2>/dev/null; then
        print_status "success" "GOB server stopped"
        [ -f "$PID_FILE" ] && rm -f "$PID_FILE"
    else
        print_status "error" "Failed to stop GOB server"
        exit 1
    fi
}

# Restart GOB
restart_gob() {
    print_header
    print_status "info" "Restarting GOB server..."
    stop_gob
    sleep 2
    start_gob
}

# Show GOB status
show_status() {
    print_header
    
    local pid
    if pid=$(is_running); then
        print_status "success" "GOB is running (PID: $pid)"
        print_status "info" "URL: ${GOB_URL}"
        print_status "info" "Directory: ${GOB_DIR}"
        print_status "info" "Logs: ${LOG_FILE}"
        
        # Test HTTP endpoint
        if curl -s -I "$GOB_URL" | grep -q "HTTP/1.1 200 OK"; then
            print_status "success" "HTTP endpoint is responding"
        else
            print_status "warning" "Process running but HTTP endpoint not responding"
        fi
        
        # Show process info
        echo -e "\n${GRAY}Process details:${NC}"
        ps -p "$pid" -o pid,ppid,pcpu,pmem,etime,cmd --no-headers 2>/dev/null || echo "Process info unavailable"
        
    else
        print_status "warning" "GOB is not running"
        
        # Check if there are any stale processes
        local stale_pids=$(pgrep -f "python run_ui.py" 2>/dev/null || true)
        if [ -n "$stale_pids" ]; then
            print_status "warning" "Found potentially stale GOB processes: $stale_pids"
            echo -e "${GRAY}You may want to run 'gob stop' to clean them up${NC}"
        fi
    fi
    
    # Show recent log entries
    if [ -f "$LOG_FILE" ]; then
        echo -e "\n${GRAY}Recent log entries:${NC}"
        tail -5 "$LOG_FILE" | sed 's/^/  /'
    fi
}

# Show logs
show_logs() {
    print_header
    
    if [ ! -f "$LOG_FILE" ]; then
        print_status "warning" "Log file not found: $LOG_FILE"
        exit 1
    fi
    
    local lines="${1:-50}"
    print_status "info" "Showing last $lines lines of GOB logs"
    echo -e "${GRAY}Log file: $LOG_FILE${NC}\n"
    
    tail -n "$lines" "$LOG_FILE"
}

# Follow logs
follow_logs() {
    print_header
    
    if [ ! -f "$LOG_FILE" ]; then
        print_status "warning" "Log file not found: $LOG_FILE"
        exit 1
    fi
    
    print_status "info" "Following GOB logs (Ctrl+C to exit)"
    echo -e "${GRAY}Log file: $LOG_FILE${NC}\n"
    
    tail -f "$LOG_FILE"
}

# Open GOB URL
open_url() {
    print_header
    
    if ! is_running >/dev/null; then
        print_status "error" "GOB is not running. Start it with 'gob start'"
        exit 1
    fi
    
    print_status "info" "Opening GOB in browser: $GOB_URL"
    
    if command -v xdg-open >/dev/null 2>&1; then
        xdg-open "$GOB_URL"
    elif command -v open >/dev/null 2>&1; then  # macOS
        open "$GOB_URL"
    else
        print_status "warning" "Could not auto-open browser. Please visit: $GOB_URL"
    fi
}

# Show help
show_help() {
    print_header
    echo
    echo -e "${CYAN}Usage:${NC} gob [command] [options]"
    echo
    echo -e "${YELLOW}Commands:${NC}"
    echo -e "  ${GREEN}start${NC}          Start the GOB server"
    echo -e "  ${GREEN}stop${NC}           Stop the GOB server"
    echo -e "  ${GREEN}restart${NC}        Restart the GOB server"
    echo -e "  ${GREEN}status${NC}         Show GOB server status"
    echo -e "  ${GREEN}logs [lines]${NC}   Show recent log entries (default: 50)"
    echo -e "  ${GREEN}follow${NC}         Follow logs in real-time"
    echo -e "  ${GREEN}url${NC}            Open GOB in browser"
    echo -e "  ${GREEN}help${NC}           Show this help message"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo -e "  gob start           # Start GOB server"
    echo -e "  gob status          # Check if GOB is running"
    echo -e "  gob logs 100        # Show last 100 log lines"
    echo -e "  gob restart         # Restart GOB server"
    echo
    echo -e "${YELLOW}Configuration:${NC}"
    echo -e "  Directory: ${GOB_DIR}"
    echo -e "  URL: ${GOB_URL}"
    echo -e "  Environment: ${CONDA_ENV}"
    echo -e "  Log file: ${LOG_FILE}"
}

# Main command dispatcher
main() {
    case "${1:-help}" in
        "start")
            start_gob
            ;;
        "stop")
            stop_gob
            ;;
        "restart")
            restart_gob
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs "${2:-50}"
            ;;
        "follow")
            follow_logs
            ;;
        "url")
            open_url
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_status "error" "Unknown command: $1"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
